"""
EDA Module for Stock Sentiment Analysis
An√°lisis Exploratorio de Datos con visualizaciones
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import os
from datetime import datetime


class StockSentimentEDA:
    """
    Clase para realizar an√°lisis exploratorio de datos
    """
    
    def __init__(self, data_path='data/stock_sentiment_clean.csv'):
        """
        Inicializa el EDA con los datos limpios
        
        Args:
            data_path (str): Ruta del archivo de datos limpios
        """
        self.data_path = data_path
        self.df = None
        self.output_dir = 'visualizations'
        
        # Configurar estilo de visualizaciones
        plt.style.use('seaborn-v0_8-darkgrid')
        sns.set_palette("husl")
        
    def load_data(self):
        """
        Carga los datos limpios
        """
        print(f"üì• Cargando datos desde: {self.data_path}")
        self.df = pd.read_csv(self.data_path)
        self.df['Date'] = pd.to_datetime(self.df['Date'])
        print(f"‚úÖ Datos cargados: {self.df.shape[0]} filas, {self.df.shape[1]} columnas")
        
        # Crear directorio de salida
        os.makedirs(self.output_dir, exist_ok=True)
        
        return self.df
    
    def plot_sentiment_distribution(self):
        """
        Gr√°fica 1: Distribuci√≥n de sentimientos (Label)
        """
        print("\nüìä Generando gr√°fica 1: Distribuci√≥n de sentimientos...")
        
        fig, axes = plt.subplots(1, 2, figsize=(14, 5))
        
        # Gr√°fica de barras
        sentiment_counts = self.df['Label'].value_counts().sort_index()
        axes[0].bar(sentiment_counts.index, sentiment_counts.values, 
                    color=['#e74c3c', '#3498db'], alpha=0.7, edgecolor='black')
        axes[0].set_xlabel('Sentimiento (Label)', fontsize=12, fontweight='bold')
        axes[0].set_ylabel('Frecuencia', fontsize=12, fontweight='bold')
        axes[0].set_title('Distribuci√≥n de Sentimientos', fontsize=14, fontweight='bold')
        axes[0].set_xticks([0, 1])
        axes[0].set_xticklabels(['Negativo (0)', 'Positivo (1)'])
        axes[0].grid(axis='y', alpha=0.3)
        
        # A√±adir valores en las barras
        for i, v in enumerate(sentiment_counts.values):
            axes[0].text(i, v + 50, str(v), ha='center', va='bottom', fontweight='bold')
        
        # Gr√°fica de pastel
        colors = ['#e74c3c', '#3498db']
        axes[1].pie(sentiment_counts.values, labels=['Negativo (0)', 'Positivo (1)'], 
                    autopct='%1.1f%%', colors=colors, startangle=90,
                    explode=(0.05, 0.05), shadow=True)
        axes[1].set_title('Proporci√≥n de Sentimientos', fontsize=14, fontweight='bold')
        
        plt.tight_layout()
        output_file = os.path.join(self.output_dir, '01_sentiment_distribution.png')
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"  ‚úÖ Guardada en: {output_file}")
        plt.close()
    
    def plot_temporal_trend(self):
        """
        Gr√°fica 2: Tendencia temporal de sentimientos
        """
        print("\nüìä Generando gr√°fica 2: Tendencia temporal...")
        
        # Agrupar por fecha y sentimiento
        temporal_data = self.df.groupby([pd.Grouper(key='Date', freq='M'), 'Label']).size().unstack(fill_value=0)
        
        fig, ax = plt.subplots(figsize=(16, 6))
        
        # Plotear l√≠neas
        temporal_data[0].plot(ax=ax, label='Negativo', color='#e74c3c', linewidth=2, marker='o', markersize=4)
        temporal_data[1].plot(ax=ax, label='Positivo', color='#3498db', linewidth=2, marker='s', markersize=4)
        
        ax.set_xlabel('Fecha', fontsize=12, fontweight='bold')
        ax.set_ylabel('N√∫mero de Noticias', fontsize=12, fontweight='bold')
        ax.set_title('Tendencia Temporal de Sentimientos por Mes', fontsize=14, fontweight='bold')
        ax.legend(fontsize=11, loc='upper left')
        ax.grid(True, alpha=0.3)
        
        plt.tight_layout()
        output_file = os.path.join(self.output_dir, '02_temporal_trend.png')
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"  ‚úÖ Guardada en: {output_file}")
        plt.close()
    
    def plot_yearly_sentiment(self):
        """
        Gr√°fica 3: Sentimientos por a√±o
        """
        print("\nüìä Generando gr√°fica 3: Sentimientos por a√±o...")
        
        yearly_data = self.df.groupby(['Year', 'Label']).size().unstack(fill_value=0)
        
        fig, ax = plt.subplots(figsize=(12, 6))
        
        x = np.arange(len(yearly_data.index))
        width = 0.35
        
        bars1 = ax.bar(x - width/2, yearly_data[0], width, label='Negativo', 
                       color='#e74c3c', alpha=0.8, edgecolor='black')
        bars2 = ax.bar(x + width/2, yearly_data[1], width, label='Positivo', 
                       color='#3498db', alpha=0.8, edgecolor='black')
        
        ax.set_xlabel('A√±o', fontsize=12, fontweight='bold')
        ax.set_ylabel('N√∫mero de Noticias', fontsize=12, fontweight='bold')
        ax.set_title('Distribuci√≥n de Sentimientos por A√±o', fontsize=14, fontweight='bold')
        ax.set_xticks(x)
        ax.set_xticklabels(yearly_data.index)
        ax.legend(fontsize=11)
        ax.grid(axis='y', alpha=0.3)
        
        # A√±adir valores en las barras
        for bars in [bars1, bars2]:
            for bar in bars:
                height = bar.get_height()
                if height > 0:
                    ax.text(bar.get_x() + bar.get_width()/2., height,
                           f'{int(height)}',
                           ha='center', va='bottom', fontsize=9)
        
        plt.tight_layout()
        output_file = os.path.join(self.output_dir, '03_yearly_sentiment.png')
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"  ‚úÖ Guardada en: {output_file}")
        plt.close()
    
    def plot_weekday_pattern(self):
        """
        Gr√°fica 4: Patr√≥n de sentimientos por d√≠a de la semana
        """
        print("\nüìä Generando gr√°fica 4: Patr√≥n por d√≠a de semana...")
        
        weekday_data = self.df.groupby(['DayOfWeek', 'Label']).size().unstack(fill_value=0)
        weekday_names = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
        
        fig, axes = plt.subplots(2, 1, figsize=(12, 10))
        
        # Gr√°fica de barras apiladas
        weekday_data.plot(kind='bar', stacked=True, ax=axes[0], 
                         color=['#e74c3c', '#3498db'], alpha=0.8, edgecolor='black')
        axes[0].set_xlabel('D√≠a de la Semana', fontsize=12, fontweight='bold')
        axes[0].set_ylabel('N√∫mero de Noticias', fontsize=12, fontweight='bold')
        axes[0].set_title('Distribuci√≥n de Sentimientos por D√≠a de la Semana (Apilado)', 
                         fontsize=14, fontweight='bold')
        axes[0].set_xticklabels(weekday_names[:len(weekday_data)], rotation=45)
        axes[0].legend(['Negativo', 'Positivo'], fontsize=11)
        axes[0].grid(axis='y', alpha=0.3)
        
        # Gr√°fica de proporci√≥n
        weekday_prop = weekday_data.div(weekday_data.sum(axis=1), axis=0) * 100
        weekday_prop.plot(kind='bar', ax=axes[1], color=['#e74c3c', '#3498db'], 
                         alpha=0.8, edgecolor='black')
        axes[1].set_xlabel('D√≠a de la Semana', fontsize=12, fontweight='bold')
        axes[1].set_ylabel('Proporci√≥n (%)', fontsize=12, fontweight='bold')
        axes[1].set_title('Proporci√≥n de Sentimientos por D√≠a de la Semana', 
                         fontsize=14, fontweight='bold')
        axes[1].set_xticklabels(weekday_names[:len(weekday_data)], rotation=45)
        axes[1].legend(['Negativo', 'Positivo'], fontsize=11)
        axes[1].grid(axis='y', alpha=0.3)
        axes[1].set_ylim([0, 100])
        
        plt.tight_layout()
        output_file = os.path.join(self.output_dir, '04_weekday_pattern.png')
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"  ‚úÖ Guardada en: {output_file}")
        plt.close()
    
    def plot_news_count_distribution(self):
        """
        Gr√°fica 5: Distribuci√≥n del n√∫mero de noticias por d√≠a
        """
        print("\nüìä Generando gr√°fica 5: Distribuci√≥n de noticias por d√≠a...")
        
        fig, axes = plt.subplots(2, 2, figsize=(14, 10))
        
        # Histograma general
        axes[0, 0].hist(self.df['News_Count'], bins=25, color='#9b59b6', 
                       alpha=0.7, edgecolor='black')
        axes[0, 0].set_xlabel('N√∫mero de Noticias por D√≠a', fontsize=11, fontweight='bold')
        axes[0, 0].set_ylabel('Frecuencia', fontsize=11, fontweight='bold')
        axes[0, 0].set_title('Distribuci√≥n del N√∫mero de Noticias', fontsize=12, fontweight='bold')
        axes[0, 0].grid(axis='y', alpha=0.3)
        axes[0, 0].axvline(self.df['News_Count'].mean(), color='red', 
                          linestyle='--', linewidth=2, label=f'Media: {self.df["News_Count"].mean():.1f}')
        axes[0, 0].legend()
        
        # Boxplot por sentimiento
        self.df.boxplot(column='News_Count', by='Label', ax=axes[0, 1], 
                       patch_artist=True, grid=False)
        axes[0, 1].set_xlabel('Sentimiento', fontsize=11, fontweight='bold')
        axes[0, 1].set_ylabel('N√∫mero de Noticias', fontsize=11, fontweight='bold')
        axes[0, 1].set_title('N√∫mero de Noticias por Sentimiento', fontsize=12, fontweight='bold')
        axes[0, 1].set_xticklabels(['Negativo (0)', 'Positivo (1)'])
        plt.sca(axes[0, 1])
        plt.xticks(rotation=0)
        
        # Tendencia temporal de noticias
        news_by_month = self.df.groupby(pd.Grouper(key='Date', freq='M'))['News_Count'].mean()
        axes[1, 0].plot(news_by_month.index, news_by_month.values, 
                       color='#27ae60', linewidth=2, marker='o', markersize=4)
        axes[1, 0].set_xlabel('Fecha', fontsize=11, fontweight='bold')
        axes[1, 0].set_ylabel('Promedio de Noticias', fontsize=11, fontweight='bold')
        axes[1, 0].set_title('Promedio Mensual de Noticias por D√≠a', fontsize=12, fontweight='bold')
        axes[1, 0].grid(True, alpha=0.3)
        axes[1, 0].tick_params(axis='x', rotation=45)
        
        # Estad√≠sticas descriptivas
        stats_text = f"""
        Estad√≠sticas de Noticias por D√≠a:
        
        Media:     {self.df['News_Count'].mean():.2f}
        Mediana:   {self.df['News_Count'].median():.2f}
        Moda:      {self.df['News_Count'].mode()[0] if len(self.df['News_Count'].mode()) > 0 else 'N/A'}
        Desv. Est: {self.df['News_Count'].std():.2f}
        M√≠nimo:    {self.df['News_Count'].min()}
        M√°ximo:    {self.df['News_Count'].max()}
        Q1:        {self.df['News_Count'].quantile(0.25):.2f}
        Q3:        {self.df['News_Count'].quantile(0.75):.2f}
        """
        
        axes[1, 1].text(0.1, 0.5, stats_text, fontsize=11, 
                       verticalalignment='center', family='monospace',
                       bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))
        axes[1, 1].axis('off')
        
        plt.tight_layout()
        output_file = os.path.join(self.output_dir, '05_news_count_distribution.png')
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"  ‚úÖ Guardada en: {output_file}")
        plt.close()
    
    def plot_quarterly_heatmap(self):
        """
        Gr√°fica 6 (BONUS): Mapa de calor de sentimientos por trimestre
        """
        print("\nüìä Generando gr√°fica BONUS: Mapa de calor trimestral...")
        
        # Crear pivot table
        quarterly_data = self.df.pivot_table(
            values='Label', 
            index='Year', 
            columns='Quarter', 
            aggfunc='mean'
        )
        
        fig, ax = plt.subplots(figsize=(10, 8))
        
        sns.heatmap(quarterly_data, annot=True, fmt='.3f', cmap='RdYlGn', 
                   center=0.5, cbar_kws={'label': 'Sentimiento Promedio'},
                   linewidths=0.5, ax=ax)
        
        ax.set_xlabel('Trimestre', fontsize=12, fontweight='bold')
        ax.set_ylabel('A√±o', fontsize=12, fontweight='bold')
        ax.set_title('Mapa de Calor: Sentimiento Promedio por Trimestre', 
                    fontsize=14, fontweight='bold')
        
        plt.tight_layout()
        output_file = os.path.join(self.output_dir, '06_quarterly_heatmap.png')
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"  ‚úÖ Guardada en: {output_file}")
        plt.close()
    
    def generate_all_plots(self):
        """
        Genera todas las visualizaciones
        """
        print("\n" + "=" * 80)
        print("üé® GENERANDO VISUALIZACIONES DE AN√ÅLISIS EXPLORATORIO")
        print("=" * 80)
        
        self.plot_sentiment_distribution()
        self.plot_temporal_trend()
        self.plot_yearly_sentiment()
        self.plot_weekday_pattern()
        self.plot_news_count_distribution()
        self.plot_quarterly_heatmap()
        
        print("\n" + "=" * 80)
        print("‚úÖ TODAS LAS VISUALIZACIONES GENERADAS EXITOSAMENTE")
        print(f"üìÅ Ubicaci√≥n: {os.path.abspath(self.output_dir)}")
        print("=" * 80)
    
    def generate_summary_report(self):
        """
        Genera un reporte resumen del an√°lisis exploratorio
        """
        print("\n" + "=" * 80)
        print("üìÑ REPORTE RESUMEN - AN√ÅLISIS EXPLORATORIO DE DATOS")
        print("=" * 80)
        
        print(f"\nüìä INFORMACI√ìN GENERAL:")
        print(f"  ‚Ä¢ Total de registros: {len(self.df)}")
        print(f"  ‚Ä¢ Rango de fechas: {self.df['Date'].min().strftime('%Y-%m-%d')} a {self.df['Date'].max().strftime('%Y-%m-%d')}")
        print(f"  ‚Ä¢ D√≠as totales: {(self.df['Date'].max() - self.df['Date'].min()).days}")
        
        print(f"\nüí≠ DISTRIBUCI√ìN DE SENTIMIENTOS:")
        sentiment_counts = self.df['Label'].value_counts()
        for label, count in sentiment_counts.items():
            label_name = 'Negativo' if label == 0 else 'Positivo'
            percentage = (count / len(self.df)) * 100
            print(f"  ‚Ä¢ {label_name} ({label}): {count} ({percentage:.2f}%)")
        
        print(f"\nüì∞ ESTAD√çSTICAS DE NOTICIAS:")
        print(f"  ‚Ä¢ Promedio de noticias por d√≠a: {self.df['News_Count'].mean():.2f}")
        print(f"  ‚Ä¢ Mediana: {self.df['News_Count'].median():.2f}")
        print(f"  ‚Ä¢ Desviaci√≥n est√°ndar: {self.df['News_Count'].std():.2f}")
        print(f"  ‚Ä¢ Rango: {self.df['News_Count'].min()} - {self.df['News_Count'].max()}")
        
        print(f"\nüìÖ DISTRIBUCI√ìN TEMPORAL:")
        years = self.df['Year'].value_counts().sort_index()
        for year, count in years.items():
            print(f"  ‚Ä¢ A√±o {year}: {count} d√≠as")
        
        print(f"\nüóìÔ∏è PATR√ìN SEMANAL:")
        weekday_names = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
        weekday_counts = self.df['DayOfWeek'].value_counts().sort_index()
        for day, count in weekday_counts.items():
            if day < len(weekday_names):
                print(f"  ‚Ä¢ {weekday_names[day]}: {count} d√≠as")
        
        print("\n" + "=" * 80)


def main():
    """
    Funci√≥n principal para ejecutar el EDA
    """
    print("=" * 80)
    print("üîç STOCK SENTIMENT ANALYSIS - EXPLORATORY DATA ANALYSIS")
    print("=" * 80)
    
    # Inicializar EDA
    eda = StockSentimentEDA()
    
    # Cargar datos
    eda.load_data()
    
    # Generar todas las visualizaciones
    eda.generate_all_plots()
    
    # Generar reporte resumen
    eda.generate_summary_report()


if __name__ == "__main__":
    main()
